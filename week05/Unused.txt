public static void SolveMaze(Maze maze, int x = 0, int y = 0, List<ValueTuple<int, int>>? currPath = null) {
        // If this is the first time running the function, then we need
        // to initialize the currPath list.
        if (currPath == null)
            currPath = new List<ValueTuple<int, int>>();

        // currPath.Add((1,2)); // Use this syntax to add to the current path

        // TODO Start Problem 5
        // ADD CODE HERE
        currPath.Add((x, y));

        if (maze.IsEnd(x, y)) {
            Console.WriteLine(currPath.AsString());
            return;
        }

        TryMove(maze, currPath, x + 1, y);
        TryMove(maze, currPath, x - 1, y);
        TryMove(maze, currPath, x, y + 1);
        TryMove(maze, currPath, x, y - 1);
        
        currPath.RemoveAt(currPath.Count - 1);

    }

    private static void tryMove(Maze maze, List<ValueTuple<int, int>> currPath, int newX, int newY) {
        if (maze.IsValidMove(currPath, newX, newY)) {
            SolveMaze(maze, newX, newY, new List<ValueTuple<int, int>>(currPath));
        }
    }

    //     if (x == maze.Width - 1 && y == maze.Height - 1) {
    //         Console.WriteLine(currPath.AsString());
    //         return;
    //     }

    //     if (x + 1 < maze.Width && maze.IsOpen(x + 1, y)) {
    //     SolveMaze(maze, x + 1, y, new List<ValueTuple<int, int>>(currPath));
    // }

    //     if (y + 1 < maze.Height && maze.IsOpen(x, y + 1)) {
    //         SolveMaze(maze, x, y + 1, new List<ValueTuple<int, int>>(currPath));
    //     }

        // Console.WriteLine(currPath.AsString()); // Use this to print out your path when you find the solution
}